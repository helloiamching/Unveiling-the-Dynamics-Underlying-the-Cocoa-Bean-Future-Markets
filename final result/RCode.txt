
#####################################################################
####################### Loading Packages#############################
#####################################################################
library(seastests)
library(forecast)
library(TSA)
library(astsa)
library(tseries)

#####################################################################
####################### Loading Data#################################
#####################################################################

cocoa_original= read.csv('/Users/wang.c/Desktop/統計三 吳冠勳+統計四 王晴+孫敏恩 (3)資料檔.csv')
cocoa_original = cocoa_original$Volume


n = length(cocoa_original)
cocoa.test =  cocoa_original[((n-51):n)]
cocoa = cocoa_original[-((n-51):n)]

#####################################################################
#######################Prelimary Analysis############################
#####################################################################

ts.plot(cocoa)

my.ts = log(cocoa+1)

ts.plot(my.ts)
acf(my.ts,lag = 1000, main = "")
pacf(my.ts,lag = 1000, main = "")

#####################################################################
#######################Stationary Test###############################
#####################################################################

adf.test(my.ts)

ocsb(my.ts,method = 'OLS',freq = 52)$Pval


#####################################################################
#######################Model Fitting#################################
#####################################################################


model1 = stats::arima(my.ts,order = c(13,0,1),method = "CSS-ML")
model2 = stats::arima(my.ts,order = c(26,0,1),method = "CSS-ML")
model3 = stats::arima(my.ts,order = c(1,0,13),method = "CSS-ML")
model4 = stats::arima(my.ts,order = c(1,0,26),method = "CSS-ML")

model5 = stats::arima(my.ts,order = c(13,0,1), seasonal = list(order = c(1,0,0), period = 52))
model6 = stats::arima(my.ts,order = c(13,0,1), seasonal = list(order = c(0,0,1), period = 52))
model7 = stats::arima(my.ts,order = c(13,0,1), seasonal = list(order = c(1,0,1), period = 52))
model8 = stats::arima(my.ts,order = c(13,0,0), seasonal = list(order = c(1,0,0), period = 52))

model9 = stats::arima(my.ts,order = c(13,0,0), seasonal = list(order = c(0,0,1), period = 52))
model10 = stats::arima(my.ts,order = c(13,0,0), seasonal = list(order = c(1,0,1), period = 52))
model11 = stats::arima(my.ts,order = c(26,0,0), seasonal = list(order = c(0,0,1), period = 52))
model12 = stats::arima(my.ts,order = c(26,0,1), seasonal = list(order = c(0,0,1), period = 52))
model13 = stats::arima(my.ts,order = c(26,0,1), seasonal = list(order = c(1,0,0), period = 52))



#model1 = astsa::sarima(my.ts,p=13,d=0,q=1)
#model2 = astsa::sarima(my.ts,p=26,d=0,q=1)
#model3 = astsa::sarima(my.ts,p=1,d=0,q=13)
#model4 = astsa::sarima(my.ts,p=1,d=0,q=26)

#model5 = astsa::sarima(my.ts,p=13,d=0,q=1,P=1,D=0,Q=0,S=52)
#model6 = astsa::sarima(my.ts,p=13,d=0,q=1,P=0,D=0,Q=1,S=52)
#model7 = astsa::sarima(my.ts,p=13,d=0,q=1,P=1,D=0,Q=1,S=52)
#model8 = astsa::sarima(my.ts,p=13,d=0,q=0,P=1,D=0,Q=0,S=52)

#model9 = astsa::sarima(my.ts,p=13,d=0,q=0,P=0,D=0,Q=1,S=52)
#model10 = astsa::sarima(my.ts,p=13,d=0,q=0,P=1,D=0,Q=1,S=52)
#model11 = astsa::sarima(my.ts,p=26,d=0,q=0,P=0,D=0,Q=1,S=52)
#model12 = astsa::sarima(my.ts,p=26,d=0,q=1,P=0,D=0,Q=1,S=52)
#model13 = astsa::sarima(my.ts,p=26,d=0,q=1,P=1,D=0,Q=0,S=52)

#####################################################################
#######################Ljung-Box Test################################
#####################################################################


find.sig.lags = function(residu){
  p.v = 1
  df=0
  while(p.v>0.05){
    df = df+1
    p.v = Box.test(residu,type = "Ljung-Box",df)$p.value
  }
  return(df)
}

models <- list(model1, model2, model3, model4, model5, model6, model7, model8, 
               model9, model10, model11, model12, model13)

for (i in 1:length(models)) {
  residu <- models[[i]]$residuals
  sig_lag <- find.sig.lags(residu)
  print(paste("Model", i, "significant lag:", sig_lag))
}


#####################################################################
#######################Diagnotics################################
#####################################################################

for (i in 1:13) {
  model <- models[[i]]
  residuals <-model$residuals
  par(mfrow=c(2,2), oma=c(0,0,2,0))
  plot(residuals, main=paste("Residuals Plot"), ylab="Residuals")
  acf(residuals, main=paste("ACF of Residuals"), lag.max=50)
  qqnorm(residuals, main=paste( "Q-Q Plot"))
  qqline(residuals, col="red")
  lb_test_results <- sapply(0:100, function(lag) {
    Box.test(residuals, lag=lag, type="Ljung-Box")$p.value
  })
  plot(0:100, lb_test_results, type="b", pch=19, xlab="Lag", ylab="P-value",
       main=paste("Ljung-Box Test P-values"), ylim=c(0, 1))
  abline(h=0.05, col="red", lty=2)
  mtext(paste("Diagnostics of model", i), outer = TRUE, cex = 1.5)
}

#####################################################################
##########################AIC & BIC##################################
#####################################################################


models_comparison <- list(model7, model8, model10)

for (i in 1:3) {
  model_comparison <- models_comparison[[i]]
  print(AIC(model_comparison))
  print(BIC(model_comparison))
}


#####################################################################
##########################Prediction#################################
#####################################################################

par(mfrow=c(1,1))
error <- matrix(NA, nrow = length(log(cocoa.test + 1)), ncol = 2)
models_prediction <- list(model7, model10)
forecast_times <- seq(990, 1041)

for (i in 1:2) {
  model_prediction <- forecast(models_prediction[[i]], h = 52)
  plot(log(cocoa_original+1), type = 'l', xlim = c(990,1041))
  lines(forecast_times, model_prediction$mean, col = "red", lty = 1)
  points(forecast_times, model_prediction$mean, col = "orange", pch = 16)
  
  polygon(c(forecast_times, rev(forecast_times)), 
          c(model_prediction$lower[, 2], rev(model_prediction$upper[, 2])), 
          col = rgb(1, 0.4, 0.4, alpha = 0.5), border = NA)
  error[, i] <- (log(cocoa.test+1)-model_prediction$mean)^2
  mse <- mean((log(cocoa.test+1)-model_prediction$mean)^2)
  print(mse)
}

dm.test(error[,1],error[,2],alternative = 'two.sided')


